#!/usr/bin/env python
#=========================================================================
# gen-harness [options] <harness-name> <src-dir> <cfg-file>
#=========================================================================
#
#  -h --help     Display this message
#  -v --verbose  Verbose mode
#
# Create a harness suitable for distribution to students.
#
# Author : Christopher Batten
# Date   : August 30, 2012
#

import argparse
import sys
import re
import os
import sys
import shutil
import glob

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )
  p.add_argument( "-v", "--verbose", action="store_true" )
  p.add_argument( "-h", "--help",    action="store_true" )
  p.add_argument( "harness_name" )
  p.add_argument( "src_dir" )
  p.add_argument( "cfg_file" )
  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#-------------------------------------------------------------------------
# Import python file
#-------------------------------------------------------------------------

def import_cfg_file( fullpath ):
  global cfg

  sys.path.append(os.path.dirname(fullpath))
  try:
      cfg = __import__(os.path.basename(fullpath))
      sys.modules['cfg'] = cfg
  finally:
      del sys.path[-1]

#-------------------------------------------------------------------------
# Verbose print
#-------------------------------------------------------------------------

verbose = False
def vprint( msg, value=None ):
  if verbose:
    if value != None:
      print msg, value
    else:
      print msg

#-------------------------------------------------------------------------
# Files to always include in the harness
#-------------------------------------------------------------------------

# Directories to always make in harness

include_dirs_always = [
  "scripts",
]

# Files to always copy into harness (excluding Makefile.in)

include_files_always = [
  ".gitignore",
  "COPYING",
  "aclocal.m4",
  "configure",
  "configure.ac",
  "conftest.py",
  "scripts/check-summary",
  "scripts/config.guess",
  "scripts/config.sub",
  "scripts/install.sh",
  "scripts/mk-install-dirs.sh",
  "scripts/vcs-version.sh",
]

#-------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------

def main():
  opts = parse_cmdline()

  global verbose
  verbose = opts.verbose

  vprint("")

  vprint( " - importing", opts.cfg_file )
  import_cfg_file(opts.cfg_file)

  harness_dir = opts.harness_name
  src_dir     = opts.src_dir

  vprint( " - harness dir =", harness_dir )
  vprint( " - src dir =", src_dir )

  #-----------------------------------------------------------------------
  # Create directories and copy always files
  #-----------------------------------------------------------------------

  if os.path.lexists( harness_dir ):
    vprint( " - removing", harness_dir )
    shutil.rmtree( harness_dir )

  if not opts.verbose:
    vprint( " - making", harness_dir )

  os.mkdir( harness_dir )

  for dir in include_dirs_always:
    vprint( " - making", harness_dir+"/"+dir )
    os.makedirs( harness_dir+"/"+dir )

  for file in include_files_always:
    vprint( " - copying", src_dir+"/"+file )
    shutil.copy2( src_dir+"/"+file, harness_dir+"/"+file )

  #-----------------------------------------------------------------------
  # Copy makefile with correct subprojects
  #-----------------------------------------------------------------------
  # Scan through makefile and remove subprojects list and just add those
  # subprojects explicitly included in the harness

  blank_line_pattern           = re.compile(r'^\s*$')
  subpkgs_list_pattern         = re.compile(r'^subpkgs = ')
  subpkgs_install_list_pattern = re.compile(r'^subpkgs_install = ')

  scan_until_blank_line = False

  vprint( " - creating", harness_dir+"/Makefile.in" )

  dest_makefile = open( harness_dir+"/Makefile.in", "w" )
  for line in open( src_dir+"/Makefile.in" ):

    match_blank_line           = blank_line_pattern.match(line)
    match_subpkgs_list         = subpkgs_list_pattern.match(line)
    match_subpkgs_install_list = subpkgs_install_list_pattern.match(line)

    if scan_until_blank_line:

      if match_blank_line:
        dest_makefile.write(line)
        scan_until_blank_line = False

    elif match_subpkgs_list:
      dest_makefile.write(line)

      for subpkg in cfg.include_full_subpkgs:
        vprint( " - adding subpkg to makefile", subpkg )
        dest_makefile.write( "  {} \\\n".format(subpkg) )

      for subpkg in cfg.include_partial_subpkgs:
        vprint( " - adding subpkg to makefile", subpkg )
        dest_makefile.write( "  {} \\\n".format(subpkg) )

      scan_until_blank_line = True

    elif match_subpkgs_install_list:
      dest_makefile.write(line)
      scan_until_blank_line = True

    else:
      dest_makefile.write(line)

  dest_makefile.close()

  #-----------------------------------------------------------------------
  # Copy full subpkgs
  #-----------------------------------------------------------------------

  for subpkg in cfg.include_full_subpkgs:
    vprint( " - making", harness_dir+"/"+subpkg )
    os.makedirs( harness_dir+"/"+subpkg )

    for file in glob.glob( src_dir+"/"+subpkg+"/"+"*.py" ):
      vprint( " - copying", file )
      shutil.copy2( file, harness_dir+"/"+subpkg )

    for file in glob.glob( src_dir+"/"+subpkg+"/"+"*-sim" ):
      vprint( " - copying", file )
      shutil.copy2( file, harness_dir+"/"+subpkg )

    vprint( " - copying", src_dir+"/"+subpkg+"/"+subpkg+".mk" )
    shutil.copy2( src_dir+"/"+subpkg+"/"+subpkg+".mk", harness_dir+"/"+subpkg )

  #-----------------------------------------------------------------------
  # Copy full files in partial subpkgs
  #-----------------------------------------------------------------------

  for subpkg in cfg.include_partial_subpkgs:
    vprint( " - making", harness_dir+"/"+subpkg )
    os.makedirs( harness_dir+"/"+subpkg )

    for file in cfg.include_partial_subpkgs_full_files:
      vprint( " - copying", file )
      shutil.copy2( src_dir+"/"+file, harness_dir+"/"+subpkg )

    vprint( " - copying", src_dir+"/"+subpkg+"/__init__.py" )
    shutil.copy2( src_dir+"/"+subpkg+"/__init__.py", harness_dir+"/"+subpkg )

    vprint( " - copying", src_dir+"/"+subpkg+"/"+subpkg+".mk" )
    shutil.copy2( src_dir+"/"+subpkg+"/"+subpkg+".mk", harness_dir+"/"+subpkg )

  #-----------------------------------------------------------------------
  # Copy partial files in partial subpkgs
  #-----------------------------------------------------------------------

  blank_line_pattern   = re.compile(r'^\s*$')
  begin_cut_pattern    = re.compile(r'^\s*#--- gen-harness : begin cut -+$')
  end_cut_pattern      = re.compile(r'^\s*#--- gen-harness : end cut -+$')
  begin_insert_pattern = re.compile(r'^\s*#--- gen-harness : begin insert -+$')
  end_insert_pattern   = re.compile(r'^\s*#--- gen-harness : end insert -+$')
  insert_pattern       = re.compile(r'^(\s*)#\s?(.*)$')

  for file in cfg.include_partial_subpkgs_strip_files:

    scan_until_end_cut     = False
    scan_until_end_insert  = False
    skip_blank_line        = False
    skip_blank_line_insert  = False

    vprint( " - stripping", src_dir+"/"+file )

    dest_file = open( harness_dir+"/"+file, "w" )
    for line in open( src_dir+"/"+file ):

      match_blank_line   = blank_line_pattern.match(line)
      match_begin_cut    = begin_cut_pattern.match(line)
      match_end_cut      = end_cut_pattern.match(line)
      match_begin_insert = begin_insert_pattern.match(line)
      match_end_insert   = end_insert_pattern.match(line)
      match_insert       = insert_pattern.match(line)

      if skip_blank_line:
        skip_blank_line = False
        if match_blank_line:
          continue

      if scan_until_end_cut:
        if match_end_cut:
          scan_until_end_cut = False
          skip_blank_line = True

      elif scan_until_end_insert:
        if match_end_insert:
          scan_until_end_insert = False
          skip_blank_line = True
        elif match_insert:
          insert_str = match_insert.group(1)+match_insert.group(2)
          if blank_line_pattern.match(insert_str):
            if not skip_blank_line_insert:
              dest_file.write( "\n" )
          else:
            dest_file.write( insert_str+"\n" )
        else:
          assert match_blank_line
          dest_file.write(line)
        skip_blank_line_insert = False

      elif match_begin_cut:
        vprint( "    + found cut region" )
        scan_until_end_cut = True

      elif match_begin_insert:
        vprint( "    + found insert region" )
        scan_until_end_insert = True
        skip_blank_line_insert = True

      else:
        dest_file.write(line)

    dest_file.close()

  #-----------------------------------------------------------------------
  # Create tarball
  #-----------------------------------------------------------------------

  os.system("tar -czvf "+harness_dir+".tar.gz "+harness_dir)

  vprint("")

main()
