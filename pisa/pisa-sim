#!/usr/bin/env python
#=========================================================================
# pisa-sim [options] <elf-file>
#=========================================================================
#
#  -h --help           Display this message
#  -v --verbose        Verbose mode
#     --trace          Turn on line tracing
#     --num-runs       Run sim multiple times to increase execution time
#
# The PISA simulator will load the given ELF file. Assumes that the
# program has been compiled such that the start of the program is at
# 0x1000. The simulator will automatically add the following instructions
# at address 0x400 to bootstrap the applications. Also assumes that the
# program will use the following instruction to end the program:
#
#   mtc0 r1, proc2mngr
#
# where r1 is one for success and two for failure.
#
# Author : Christopher Batten
# Date   : May 25, 2014
#

import argparse
import sys
import re
import time

import elf

from SparseMemoryImage import SparseMemoryImage
from PisaSim           import PisaSim
from pisa_encoding     import assemble,disassemble

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-v", "--verbose", action="store_true" )
  p.add_argument( "-h", "--help",    action="store_true" )

  # Additional commane line arguments for the simulator

  p.add_argument( "--trace",    action="store_true" )
  p.add_argument( "--num-runs", type=int, default=1 )
  p.add_argument( "elf_file" )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#-------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------

def main():
  opts = parse_cmdline()

  # Start the wallclock timer

  start_time = time.time()

  # Load the elf file

  mem_image = None
  with open(opts.elf_file,'rb') as file_obj:
    mem_image = elf.elf_reader( file_obj )

  # Add a bootstrap section at address 0x400

  bootstrap_asm = """
    lui r29, 0x0007
    ori r29, r0, 0xfffc
    j   0x1000
  """

  bootstrap_mem_image = assemble( bootstrap_asm )
  bootstrap_bytes = bootstrap_mem_image.get_section(".text").data
  mem_image.add_section( ".bootstrap", 0x400, bootstrap_bytes )

  # Apparently we also need to binary rewrite the jump at 0x1008. This is
  # super hacky for now -- this relies on the fact that the binrewrite
  # section will be loaded _after_ the primary .text section so that we
  # can essentially use the loader to do the binary rewrite.

  binrewrite_asm = """
    j   0x1020
  """

  binrewrite_mem_image = assemble( binrewrite_asm )
  binrewrite_bytes = binrewrite_mem_image.get_section(".text").data
  mem_image.add_section( ".binrewrite", 0x1008, binrewrite_bytes )

  # Construct the PISA simulator and load program

  sim = PisaSim( test_en=False, trace_en=opts.trace )
  sim.load( mem_image )

  # Run the simulation (potentially many times)

  num_total_inst_all_runs = 0
  for i in xrange(opts.num_runs):

    sys.stdout.write('.')
    sys.stdout.flush()

    sim.reset()
    sim.run()

    num_total_inst_all_runs += sim.num_total_inst

  # Stop the wallclock timer

  stop_time = time.time()
  sim_time  = stop_time - start_time

  # Display the result value from the simulator

  print ""
  print " Simulator status =", sim.status

  # Display statistics

  print ""
  print " num_total_inst          =", sim.num_total_inst
  print " num_inst                =", sim.num_inst
  print " num_total_inst_all_runs =", num_total_inst_all_runs
  print " sim_time                =", sim_time
  print " inst_per_sec            =", num_total_inst_all_runs / sim_time

  print ""

main()

