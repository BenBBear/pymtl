#!/usr/bin/env python
#=========================================================================
# pex-sorter-sim [options] <in0> <in1> <in2> <in3>
#=========================================================================
#
#  -h --help     Display this message
#  -v --verbose  Verbose mode
#
#  --impl        Choose model implementation {bl,cl,rtl,struct}
#                 bl     : behavioral-level model
#                 cl     : cycle-level model
#                 rtl    : register-transfer-level model
#                 struct : structural model
#
#  --dump-vcd    Dump vcd to a file
#
# The sorter simulator. Provide a list of four integers on the command
# line and the simulator will return the sorted output.
#
# Author : Christopher Batten
# Date   : August 30, 2012
#

import argparse
import sys
import re

from pymtl import *

from SorterBL     import SorterBL
from SorterCL     import SorterCL
from SorterRTL    import SorterRTL
from SorterStruct import SorterStruct

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-v", "--verbose", action="store_true" )
  p.add_argument( "-h", "--help",    action="store_true" )

  # Additional commane line arguments for the simulator

  p.add_argument( "--impl",       default="bl" )
  p.add_argument( "--dump-vcd",   action="store_true" )

  p.add_argument( "in0", type=int )
  p.add_argument( "in1", type=int )
  p.add_argument( "in2", type=int )
  p.add_argument( "in3", type=int )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#-------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------

def main():
  opts = parse_cmdline()

  # Determine which model to use in the simulator

  model_impl_dict = {
    'bl'     : SorterBL,
    'cl'     : SorterCL,
    'rtl'    : SorterRTL,
    'struct' : SorterStruct,
  }

  # Instantiate and elaborate the model

  model = model_impl_dict[ opts.impl ]()
  model.elaborate()

  # Create a simulator using the simulation tool

  sim = SimulationTool( model )

  # Turn on vcd dumping

  if ( opts.dump_vcd ):
    sim.dump_vcd("pex-sorter-sim.vcd")

  # Reset the simulator

  sim.reset()

  # Set the input from the command line

  model.in_[0].value = opts.in0
  model.in_[1].value = opts.in1
  model.in_[2].value = opts.in2
  model.in_[3].value = opts.in3

  # Evaluate combinational concurrent blocks in simulator

  sim.eval_combinational()

  # Tick the simulator for a couple of cycles and print line trace

  for i in xrange(5):
    if ( opts.verbose ):
      sim.print_line_trace()
    sim.cycle()

  # Display the final output from the simulator

  print model.out[0].value, model.out[1].value, \
        model.out[2].value, model.out[3].value

main()

