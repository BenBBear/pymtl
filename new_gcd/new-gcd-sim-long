#!/usr/bin/env python
#=========================================================================
# pex-gcd-sim [options] <in0> <in1>
#=========================================================================
#
#  -h --help           Display this message
#  -v --verbose        Verbose mode
#
#  --impl              Choose model implementation (default bl)
#                       bl     : behavioral-level model
#                       rtl    : register-transfer-level model
#
#  --dump-vcd          Dump vcd to dump.vcd
#  --dump-vcd <fname>  Dump vcd to given file name <fname>
#
# The GCD benchmark. Provide an integers on the commandline indicating how
# many greatest common divisors you would like to calculate.
#

import argparse
import sys
import re
import fractions
import random

random.seed( "0x4750" )

from new_pymtl import *

from GcdUnitBL  import GcdUnitBL
from GcdUnitRTL import GcdUnitRTL

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-v", "--verbose", action="store_true" )
  p.add_argument( "-h", "--help",    action="store_true" )
  p.add_argument( "--verify",        action="store_true" )

  # Additional commane line arguments for the simulator

  p.add_argument( "--impl", default="bl",
    choices=["bl","rtl"] )

  p.add_argument( "--dump-vcd", nargs='?',
                  default=False, const="dump.vcd" )

  p.add_argument( "ngcd", type=int )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#-------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------

def main():
  opts = parse_cmdline()

  # Create ngcd GCD calculations to perform

  gcds = []
  for i in xrange( opts.ngcd ):
    a      = Bits( 32, random.randint( 0, 2**32-1 ) )
    b      = Bits( 32, random.randint( 0, 2**32-1 ) )
    msg    = concat( [ a, b ]  )
    result = Bits( 32, fractions.gcd( a.uint(), b.uint() ) )
    gcds  += [ (msg, result) ]

  # Determine which model to use in the simulator

  model_impl_dict = {
    'bl'     : GcdUnitBL,
    'rtl'    : GcdUnitRTL,
  }

  # Instantiate and elaborate the model

  model = model_impl_dict[ opts.impl ]()
  model.elaborate()

  # Create a simulator using the simulation tool

  sim = SimulationTool( model )

  # Turn on vcd dumping

  if opts.dump_vcd:
    sim.dump_vcd(opts.dump_vcd)

  # Reset the simulator

  sim.reset()

  model.out_rdy.value = True

  # Tick the simulator for a couple of cycles and print line trace

  while gcds or not model.out_val.value:

    # If the GCD unit is ready, give it some work to do

    if model.in_rdy:
      msg, result = gcds.pop()
      model.in_msg.value = msg
      model.in_val.value = True

    # Line tracing

    if opts.verbose:
      sim.print_line_trace()

    # Cycle simulator

    sim.cycle()

    # Verify result

    if opts.verify and model.out_val:
      assert model.out_msg == result

  # Add a couple extra ticks so that the VCD dump is nicer

  if opts.verbose:
    sim.print_line_trace()

  model.out_rdy.value = False

  sim.cycle()
  sim.cycle()
  sim.cycle()

main()

