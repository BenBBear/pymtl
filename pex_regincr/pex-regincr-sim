#!/usr/bin/env python
#=========================================================================
# pex-regincr-sim [options] <input>
#=========================================================================
#
#  -h --help           Display this message
#  -v --verbose        Verbose mode
#
#  --impl <impl>       Choose model implementation (default flat)
#                       flat   : flat model
#                       struct : structual model
#
#  --dump-vcd          Dump vcd to dump.vcd
#  --dump-vcd <fname>  Dump vcd to given file name <fname>
#
# The register/incrementer simulator. Provide an integer on the command
# line and the simulator will return the incremented output.
#
# Author : Christopher Batten
# Date   : August 30, 2012
#

import argparse
import sys
import re

from pymtl import *

from RegIncrFlat   import RegIncrFlat
from RegIncrStruct import RegIncrStruct

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-v", "--verbose", action="store_true" )
  p.add_argument( "-h", "--help",    action="store_true" )

  # Additional commane line arguments for the simulator

  p.add_argument( "--impl", default="flat",
    choices=["flat","struct"] )

  p.add_argument( "--dump-vcd", nargs='?',
                  default=False, const="dump.vcd" )

  p.add_argument( "input", type=int )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#-------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------

def main():
  opts = parse_cmdline()

  # Determine which model to use in the simulator

  model_impl_dict = {
    'flat'   : RegIncrFlat,
    'struct' : RegIncrStruct,
  }

  # Instantiate and elaborate the model

  model = model_impl_dict[ opts.impl ]()
  model.elaborate()

  # Create a simulator using the simulation tool

  sim = SimulationTool( model )

  # Turn on vcd dumping

  if opts.dump_vcd:
    sim.dump_vcd(opts.dump_vcd)

  # Reset the simulator

  sim.reset()

  # Set the input from the command line

  model.in_.value = opts.input

  # Evaluate combinational concurrent blocks in simulator

  sim.eval_combinational()

  # Tick the simulator for a couple of cycles and print line trace

  for i in xrange(5):
    if opts.verbose:
      sim.print_line_trace()
    sim.cycle()

  # Display the final output from the simulator

  print model.out.value

main()

