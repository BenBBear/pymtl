#!/usr/bin/env python
#=========================================================================
# mesh-sim [options]
#=========================================================================
#
#  -h --help           Display this message
#  -v --verbose        Verbose mode
#
#  --impl <impl>       Choose model implementation
#                       dim : mesh with dimension ordered routing
#
#  --pattern <pattern> Traffic pattern (default tornado)
#                       tornado  : tornado traffic pattern
#                       urandom  : uniform random traffic pattern
#
#  --step <step-size>  Injection step size value (default 5)
#                       use 5 or 3 for tornado traffic
#                       use 10 for uniform random traffic
#
#  --dump-vcd          Dump vcd to dump.vcd
#  --dump-vcd <fname>  Dump vcd to given file name <fname>
#
#  --stats             Dump stats standard out
#  --stats <fname>     Dump stats to given file name <fname>
#
# Ring Network Simulation Driver. Choose a traffic pattern and injection
# rate step size to generate latency-bandwidth plots.
#
# Author : Shreesha Srinath
# Date   : November 16, 2012

import argparse
import sys
import re

from random             import randint, seed
from new_pymtl          import *
from new_pmlib          import NetMsg
from MeshNetworkCL      import MeshNetworkCL

# Fix the random seed so results are reproducible
seed(0xdeadbeef)

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-v", "--verbose", action="store_true" )
  p.add_argument( "-h", "--help",    action="store_true" )

  # Additional command line arguments for the simulator

  p.add_argument( "--impl", default="dim",
    choices=["dim"] )

  p.add_argument( "--pattern", default="urandom",
    choices=["tornado","urandom"] )

  p.add_argument( "--step", nargs='?',
                  default=5, const=5, type=int )

  p.add_argument( "--dump-vcd", nargs='?',
                  default=False, const="dump.vcd" )

  p.add_argument( "--stats",    nargs='?', default=False, const="-" )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#--------------------------------------------------------------------------
# Global Constants
#--------------------------------------------------------------------------

NUM_ROUTERS         = 64
#NUM_ROUTERS         = 4
NUM_MESSAGES        = 2*16
PAYLOAD_NBITS       = 16
NUM_ENTRIES         = 4

NUM_WARMUP_CYCLES   = 2000
NUM_MEASURE_PACKETS = 32
INVALID_TIMESTAMP   = 0

#--------------------------------------------------------------------------
# simulate
#--------------------------------------------------------------------------

def simulate( ModelType, injection_rate, route_compute, drain_limit,
              dump_vcd, verbose ):

  # Simulation Variables

  average_latency     = 0
  packets_generated   = 0
  packets_received    = 0
  total_latency       = 0
  drain_cycles        = 0
  sim_done            = False

  # Syntax helper

  mk_net_msg = NetMsg( NUM_ROUTERS, NUM_MESSAGES, PAYLOAD_NBITS ).mk_msg

  # Instantiate and elaborate a ring network

  model = ModelType( NUM_ROUTERS, NUM_MESSAGES, PAYLOAD_NBITS, NUM_ENTRIES )
  model.elaborate()

  # Source Queues - Modeled as Bypass Queues

  src = [ [] for x in xrange( NUM_ROUTERS ) ]

  # Create a simulator using the simulation tool

  sim = SimulationTool( model )

  # Turn on vcd dumping

  if dump_vcd:
    sim.dump_vcd(opts.dump_vcd)

  # Reset the simulator

  sim.reset()

  # Run the simulation

  for i in xrange( NUM_ROUTERS ):
    model.out[i].rdy.value = 1

  while not sim_done:
    for i in xrange( NUM_ROUTERS ):

      # Generate packet

      if ( randint( 0, 100 ) < injection_rate ):

        # traffic pattern based dest selection

        dest = route_compute( i )

        # inject packet past the warmup period

        if (    ( sim.ncycles  > NUM_WARMUP_CYCLES   )
            and ( packets_generated < NUM_MEASURE_PACKETS ) ):
          src[i].append( mk_net_msg( dest, i,
                                     0, sim.ncycles ) )
          packets_generated += 1

        # packet injection during warmup or drain phases

        else:
          src[i].append( mk_net_msg( dest, i,
                                     0, INVALID_TIMESTAMP ) )

      # Inject from source queue

      if ( len( src[i] ) > 0 ):
        model.in_[i].msg.value = src[i][0]
        model.in_[i].val.value = 1
      else:         
        model.in_[i].val.value = 0

      # Receive a packet

      if ( model.out[i].val.value == 1 ):
        timestamp = \
          model.out[i].msg.payload.value

        # collect data for measurement packets

        if ( timestamp != INVALID_TIMESTAMP ):
          total_latency    += ( sim.ncycles - timestamp.uint() )
          packets_received += 1
          average_latency = total_latency / float( packets_received )

      # Check if finished - drain phase

      if (   ( average_latency > drain_limit )
          or ( packets_received == NUM_MEASURE_PACKETS ) ):
        average_latency = total_latency / float( packets_received )
        sim_done = True
        break

      # Pop the source queue

      if ( model.in_[i].rdy.value == 1 ) and ( len( src[i] ) > 0 ):
        src[i].pop(0)

    # advance simulation

    sim.cycle()

    # print line trace if enables

    if verbose:
      sim.print_line_trace()

  # return the calculated average_latency and count of packets received

  return [average_latency, packets_received]

#-------------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------

def tornado( node ):
  # TODO: make this variable for number of nodes
  assert False
  return ( node + 4 ) % 8

def urandom( node ):
  return randint( 0, NUM_ROUTERS-1 )

def main():
  opts = parse_cmdline()

  # Determine which model to use in the simulator

  impl_dict = {
    'dim'   : MeshNetworkCL,
  }

  # Determine which pattern to use and create the pattern

  pattern_dict = {
    'tornado'     : tornado,
    'urandom'     : urandom,
  }

  # Determine drain_limit based on the selected pattern

  drain_limit_dict = {
    'tornado'     : 9*10,
    'urandom'     : 5*10,
  }

  # injection sweep step size

  step = opts.step

  # Handle stats, redirect output to standard out or a file

  if opts.stats:
    os = sys.stdout
    if opts.stats != "-":
      os = open( opts.stats, "w" )

  # Network Simulation Sweeps

  for i in xrange( step, 105, step ):
    results = simulate( impl_dict[ opts.impl ],           # model type
                        i,                                # injection rate
                        pattern_dict[ opts.pattern ],     # traffic pattern
                        drain_limit_dict[ opts.pattern ], # drain limit
                        opts.dump_vcd,                    # dump_vcd
                        opts.verbose )                    # verbose

    # Handle stats if enabled

    if opts.stats:
      if results[1] < NUM_MEASURE_PACKETS:
        print >> os, "Injection Rate {} saturates the network".format( i )
        break
      else:
        print >> os, "{:>2d} {}".format( i, results[0] )

main()
