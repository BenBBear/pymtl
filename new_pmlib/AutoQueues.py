#=========================================================================
# AutoQueues.py
#=========================================================================
from new_pymtl     import *
from new_pmlib     import InValRdyBundle, OutValRdyBundle
from collections   import deque

#=========================================================================
# InAutoQueue
#=========================================================================
class InAutoQueue( Model ):

  #-----------------------------------------------------------------------
  # __init__
  #-----------------------------------------------------------------------
  def __init__( s, MsgType, maxlen ):

    s.in_    = InValRdyBundle( MsgType )
    s.data   = deque( maxlen = maxlen )

  #-----------------------------------------------------------------------
  # deq
  #-----------------------------------------------------------------------
  # Method interface
  def deq( s ):
    return s.data.pop()

  #-----------------------------------------------------------------------
  # peek
  #-----------------------------------------------------------------------
  # Method interface
  def peek( s ):
    return s.data[-1]

  #-----------------------------------------------------------------------
  # is_empty
  #-----------------------------------------------------------------------
  # Method interface
  def is_empty( s ):
    return len( s.data ) == 0

  #-----------------------------------------------------------------------
  # set_ports
  #-----------------------------------------------------------------------
  # Method interface
  def set_ports( s ):
    s.in_.rdy.v = len( s.data ) < s.data.maxlen

  #-----------------------------------------------------------------------
  # elaborate_logic
  #-----------------------------------------------------------------------
  def elaborate_logic( s ):

    @s.combinational
    def auto_enq():
      if s.in_.val & s.in_.rdy:
        s.data.appendleft( s.in_.msg[:] )

  #-----------------------------------------------------------------------
  # line_trace
  #-----------------------------------------------------------------------
  def line_trace( s ):
    if   len( s.data ) == 0:             return ' '
    elif len( s.data ) == s.data.maxlen: return 'F'
    else:                                return '.'

  #-----------------------------------------------------------------------
  ## OPTION2
  ##-----------------------------------------------------------------------
  #def set_ports( s ):
  #  if s.in_.val & s.in_.rdy:
  #    s.data.appendleft( s.in_.msg[:] )
  #  s.in_.rdy.v = len( s.data ) < s.data.maxlen
  #def elaborate_logic( s ):
  #  pass



#=========================================================================
# OutAutoQueue
#=========================================================================
class OutAutoQueue( Model ):

  #-----------------------------------------------------------------------
  # __init__
  #-----------------------------------------------------------------------
  def __init__( s, MsgType, maxlen ):

    s.out    = OutValRdyBundle( MsgType )
    s.data   = deque( maxlen=maxlen )

  #-----------------------------------------------------------------------
  # enq
  #-----------------------------------------------------------------------
  # Method interface
  def enq( s, msg ):
    return s.data.appendleft( msg )

  #-----------------------------------------------------------------------
  # is_full
  #-----------------------------------------------------------------------
  # Method interface
  def is_full( s ):
    return len( s.data ) == s.data.maxlen

  #-----------------------------------------------------------------------
  # set_ports
  #-----------------------------------------------------------------------
  # Method interface
  def set_ports( s ):
    s.out.val.v = len( s.data ) > 0
    if s.out.val:
      s.out.msg.v = s.data[-1]

  #-----------------------------------------------------------------------
  # elaborate_logic
  #-----------------------------------------------------------------------
  def elaborate_logic( s ):

    @s.combinational
    def auto_deq():
      if s.out.val & s.out.rdy:
        s.data.pop()

  #-----------------------------------------------------------------------
  # line_trace
  #-----------------------------------------------------------------------
  def line_trace( s ):
    if   len( s.data ) == 0:             return ' '
    elif len( s.data ) == s.data.maxlen: return 'F'
    else:                                return '.'

