#!/usr/bin/env python
#=========================================================================
# proc-fl-sim [options] <elf-file>
#=========================================================================
#
#  -h --help     Display this message
#  -v --verbose  Verbose mode
#     --trace    Turn on line tracing
#
#     --impl     Choose MatrixVec implementation (default fl)
#                  fl : functional-level model
#                  cl : cycle-level model
#
# The simulator will load the given ELF file. Assumes that the program
# has been compiled such that the start of the program is at 0x1000. The
# simulator will automatically add the following instructions at address
# 0x400 to bootstrap the applications. Also assumes that the program will
# use the following instruction to end the program:
#
#   mtc0 r1, proc2mngr
#
# where r1 is one for success and two for failure.
#
# Author : Christopher Batten
# Date   : May 25, 2014
#

from __future__ import print_function

import argparse
import sys
import re
import time

from pymtl import *
from pclib import *
from pisa      import *

from ParcProcFL import ParcProcFL
from mvmult_fl  import MatrixVecFL
from mvmult_cl  import MatrixVecCL

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-v", "--verbose", action="store_true" )
  p.add_argument( "-h", "--help",    action="store_true" )

  # Additional commane line arguments for the simulator

  p.add_argument( "--trace",    action="store_true" )
  p.add_argument( "--impl",     default="fl", choices=["fl","cl"] )

  p.add_argument( "elf_file" )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#-------------------------------------------------------------------------
# TestHarness
#-------------------------------------------------------------------------
# Maybe this should be refactored somewhere?

class TestHarness (Model):

  #-----------------------------------------------------------------------
  # constructor
  #-----------------------------------------------------------------------

  def __init__( s, XcelModel, mem_delay ):

    # Create parameters

    memreq_p  = mem_msgs.MemReqParams(32,32)
    memresp_p = mem_msgs.MemRespParams(32)

    # Instantiate models

    s.src    = TestSource  ( 32, [], 0 )
    s.sink   = TestSink    ( 32, [], 0 )
    s.proc   = ParcProcFL  ( test_en=False )
    s.mem    = TestMemory  ( memreq_p, memresp_p, 3, mem_delay )
    s.mvmult = XcelModel   ()

  #-----------------------------------------------------------------------
  # elaborate
  #-----------------------------------------------------------------------

  def elaborate_logic( s ):

    # Processor <-> Proc/Mngr

    s.connect( s.proc.mngr2proc, s.src.out         )
    s.connect( s.proc.proc2mngr, s.sink.in_        )

    # Processor <-> Memory

    s.connect( s.proc.imemreq,   s.mem.reqs[0]     )
    s.connect( s.proc.imemresp,  s.mem.resps[0]    )
    s.connect( s.proc.dmemreq,   s.mem.reqs[1]     )
    s.connect( s.proc.dmemresp,  s.mem.resps[1]    )

    # Processor <-> Accelerator

    s.connect( s.proc.to_cp2,    s.mvmult.from_cpu )
    s.connect( s.proc.from_cp2,  s.mvmult.to_cpu   )

    # Accelerator <-> Memory

    s.connect( s.mvmult.memreq,  s.mem.reqs[2]     )
    s.connect( s.mvmult.memresp, s.mem.resps[2]    )

  #-----------------------------------------------------------------------
  # load
  #-----------------------------------------------------------------------

  def load( self, mem_image ):

    sections = mem_image.get_sections()
    for section in sections:
      start_addr = section.addr
      stop_addr  = section.addr + len(section.data)
      self.mem.mem.mem[start_addr:stop_addr] = section.data

  #-----------------------------------------------------------------------
  # done
  #-----------------------------------------------------------------------

  def done( s ):
    return s.proc.status > 0

  #-----------------------------------------------------------------------
  # line_trace
  #-----------------------------------------------------------------------

  def line_trace( s ):
    return s.src.line_trace()    + " > " + \
           s.proc.line_trace()   + " " + \
           s.mvmult.line_trace() + " " + \
           s.mem.line_trace()    + " > " + \
           s.sink.line_trace()

#-------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------

def main():
  opts = parse_cmdline()

  # Start the wallclock timer

  start_time = time.time()

  # Load the elf file

  mem_image = None
  with open(opts.elf_file,'rb') as file_obj:
    mem_image = elf.elf_reader( file_obj )

  # Add a bootstrap section at address 0x400

  bootstrap_asm = """
    lui r29, 0x0007
    ori r29, r0, 0xfffc
    j   0x1000
  """

  bootstrap_mem_image = pisa_encoding.assemble( bootstrap_asm )
  bootstrap_bytes = bootstrap_mem_image.get_section(".text").data
  mem_image.add_section( ".bootstrap", 0x400, bootstrap_bytes )

  # Apparently we also need to binary rewrite the jump at 0x1008. This is
  # super hacky for now -- this relies on the fact that the binrewrite
  # section will be loaded _after_ the primary .text section so that we
  # can essentially use the loader to do the binary rewrite.

  binrewrite_asm = """
    j   0x1020
  """

  binrewrite_mem_image = pisa_encoding.assemble( binrewrite_asm )
  binrewrite_bytes = binrewrite_mem_image.get_section(".text").data
  mem_image.add_section( ".binrewrite", 0x1008, binrewrite_bytes )

  # Determine which model to use in the simulator

  model_impl_dict = {
    'fl' : MatrixVecFL,
    'cl' : MatrixVecCL,
  }

  # Instantiate and elaborate the model

  model = TestHarness( model_impl_dict[opts.impl], 0 )
  model.elaborate()

  # Load the program into the model

  model.load( mem_image )

  # Create a simulator using the simulation tool

  sim = SimulationTool( model )

  # Run the simulation

  sim.reset()
  model.proc.go.value = 1
  while not model.done():
    if opts.trace:
      sim.print_line_trace()
    sim.cycle()

  # Add a couple extra ticks so that the VCD dump is nicer

  sim.cycle()
  sim.cycle()
  sim.cycle()

  # Stop the wallclock timer

  stop_time = time.time()
  sim_time  = stop_time - start_time

  # Display the result value from the simulator

  print()
  print( " Simulator return value =", model.proc.status )

  # Display statistics

  print()
  print( " num_total_inst          =", model.proc.num_total_inst )
  print( " num_total_cycles        =", sim.ncycles )
  print( " sim_time                =", sim_time )
  print( " cycles_per_sec          =", sim.ncycles / sim_time )
  print( " num_inst                =", model.proc.num_inst )

  print()

main()

