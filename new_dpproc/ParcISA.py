from new_pymtl import *

#-------------------------------------------------------------------------
# Parc Instruction Fields
#-------------------------------------------------------------------------

OP    = slice( 26, 32 )
RS    = slice( 21, 26 )
RT    = slice( 16, 21 )
RD    = slice( 11, 16 )
SHAMT = slice(  6, 11 )
FUNC  = slice(  0,  6 )
IMM   = slice(  0, 16 )
TGT   = slice(  0, 26 )

#-------------------------------------------------------------------------
# Parc Instruction Definitions
#-------------------------------------------------------------------------

NOP   =   0   # 0b000000_00000_00000_00000_00000_000000
ADDIU =   1   # 0b001001_?????_?????_?????_?????_??????
ORI   =   2   # 0b001101_?????_?????_?????_?????_??????
LUI   =   3   # 0b001111_00000_?????_?????_?????_??????
ADDU  =   4   # 0b000000_?????_?????_?????_00000_100001
LW    =   5   # 0b100011_?????_?????_?????_?????_??????
SW    =   6   # 0b101011_?????_?????_?????_?????_??????
JAL   =   7   # 0b000011_?????_?????_?????_?????_??????
JR    =   8   # 0b000000_?????_00000_00000_00000_001000
BNE   =   9   # 0b000101_?????_?????_?????_?????_??????
MTC0  =  10   # 0b010000_00100_?????_?????_00000_000000
ANDI  =  11   # 0b001100_?????_?????_?????_?????_??????
XORI  =  12   # 0b001110_?????_?????_?????_?????_??????
SLTI  =  13   # 0b001010_?????_?????_?????_?????_??????
SLTIU =  14   # 0b001011_?????_?????_?????_?????_??????
SLL   =  15   # 0b000000_00000_?????_?????_?????_000000
SRL   =  16   # 0b000000_00000_?????_?????_?????_000010
SRA   =  17   # 0b000000_00000_?????_?????_?????_000011
SLLV  =  18   # 0b000000_?????_?????_?????_00000_000100
SRLV  =  19   # 0b000000_?????_?????_?????_00000_000110
SRAV  =  20   # 0b000000_?????_?????_?????_00000_000111
SUBU  =  21   # 0b000000_?????_?????_?????_00000_100011
AND   =  22   # 0b000000_?????_?????_?????_00000_100100
OR    =  23   # 0b000000_?????_?????_?????_00000_100101
XOR   =  24   # 0b000000_?????_?????_?????_00000_100110
NOR   =  25   # 0b000000_?????_?????_?????_00000_100111
SLT   =  26   # 0b000000_?????_?????_?????_00000_101010
SLTU  =  27   # 0b000000_?????_?????_?????_00000_101011
MUL   =  28   # 0b011100_?????_?????_?????_00000_000010
DIV   =  29   # 0b100111_?????_?????_?????_00000_000101
DIVU  =  30   # 0b100111_?????_?????_?????_00000_000111
REM   =  31   # 0b100111_?????_?????_?????_00000_000110
REMU  =  32   # 0b100111_?????_?????_?????_00000_001000
LH    =  33   # 0b100001_?????_?????_?????_?????_??????
LHU   =  34   # 0b100101_?????_?????_?????_?????_??????
LB    =  35   # 0b100000_?????_?????_?????_?????_??????
LBU   =  36   # 0b100100_?????_?????_?????_?????_??????
SH    =  37   # 0b101001_?????_?????_?????_?????_??????
SB    =  38   # 0b101000_?????_?????_?????_?????_??????
J     =  39   # 0b000010_?????_?????_?????_?????_??????
JAL   =  40   # 0b000011_?????_?????_?????_?????_??????
JALR  =  41   # 0b000000_?????_00000_?????_00000_001001
BEQ   =  42   # 0b000100_?????_?????_?????_?????_??????
BLEZ  =  43   # 0b000110_?????_00000_?????_?????_??????
BGTZ  =  44   # 0b000111_?????_00000_?????_?????_??????
BLTZ  =  45   # 0b000001_?????_00000_?????_?????_??????
BGEZ  =  46   # 0b000001_?????_00001_?????_?????_??????
MFC0  =  47   # 0b010000_00000_?????_?????_00000_000000
MTC2  =  48   # 0b010010_00100_?????_?????_00000_000???
MFC2  =  49   # 0b010010_00000_?????_?????_00000_000???

#-------------------------------------------------------------------------
# Parc Instruction Disassembler
#-------------------------------------------------------------------------

inst_to_str = {
    NOP    : "nop",
    ADDIU  : "addiu",
    ORI    : "ori",
    LUI    : "lui",
    ADDU   : "addu",
    LW     : "lw",
    SW     : "sw",
    JAL    : "jal",
    JR     : "jr",
    BNE    : "bne",
    MTC0   : "mtc0",
    ANDI   : "andi",
    XORI   : "xori",
    SLTI   : "slti",
    SLTIU  : "sltiu",
    SLL    : "sll",
    SRL    : "srl",
    SRA    : "sra",
    SLLV   : "sllv",
    SRLV   : "srlv",
    SRAV   : "srav",
    SUBU   : "subu",
    AND    : "and",
    OR     : "or",
    XOR    : "xor",
    NOR    : "nor",
    SLT    : "slt",
    SLTU   : "sltu",
    MUL    : "mul",
    DIV    : "div",
    DIVU   : "divu",
    REM    : "rem",
    REMU   : "remu",
    LB     : "lb",
    LBU    : "lbu",
    LH     : "lh",
    LHU    : "lhu",
    SB     : "sb",
    SH     : "sh",
    J      : "j",
    JALR   : "jalr",
    BEQ    : "beq",
    BLEZ   : "blez",
    BGTZ   : "bgtz",
    BLTZ   : "bltz",
    BGEZ   : "bgez",
    MFC0   : "mfc0",
    MTC2   : "mtc2",
    MFC2   : "mfc2"
}

#-------------------------------------------------------------------------
# Parc ASM Test Macros
#-------------------------------------------------------------------------
def mk_rtype( op, rs=0, rt=0, rd=0, sa=0, func=0 ):
  inst        = Bits(32)
  inst[OP]    = op
  inst[RS]    = rs
  inst[RT]    = rt
  inst[RD]    = rd
  inst[SHAMT] = sa
  inst[FUNC]  = func
  return inst

# TODO: make this function automatically handle li with imm > 16 bits?
#       this scenario would emit a lui/ori inst pair instead
def mk_itype( op, rs=0, rt=0, imm=0 ):
  inst        = Bits(32)
  inst[OP]    = op
  inst[RS]    = rs
  inst[RT]    = rt
  inst[IMM]   = imm
  return inst

def mk_jtype( op, tgt ):
  inst        = Bits(32)
  inst[OP]    = op
  inst[TGT]   = tgt
  return inst


